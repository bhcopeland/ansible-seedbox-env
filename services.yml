---

- name: ensure paths exist
  file:
    path: "{{item}}"
    owner: "{{username}}"
    state: directory
  with_items:
    - "{{flexget_path}}"
    - /media/Storage/

- name: Copy flexget config
  copy:
    src: "{{playbook_dir}}/files/flexget"
    dest: "/opt"
    owner: "{{username}}"
    force: yes
    directory_mode: yes

- name: Install flexget
  pip:
    name: flexget
    virtualenv: "{{flexget_path}}/venv"
    virtualenv_python: python3.5
  become_user: "{{username}}"

- name: setup cron hourly
  cron:
    name: "run flexget"
    user: "{{username}}"
    special_time: "{{item.time}}"
    job: "{{item.cron}}"
  with_items:
    - { cron: 'foo', time: 'hourly' }
    - { cron: 'foo', time: 'monthly' }
#    - "{{flexget_path}}/bin/flexget --cron -c /opt/flexget/config_tv.yml execute >/dev/null 2>&1"
#    - "{{flexget_path}}/bin/flexget --cron -c /opt/flexget/config_sorter.yml execute >/dev/null 2>&1"
#    - "get_iplayer --pvr --quiet"

#- name: setup cron rclone cron
#  cron:
#    name: "run flexget"
#    user: "{{username}}"
#    special_time: hourly
#    job: "flock -n /tmp/.rlock_lock rclone move /var/data/ gstorage:/Plex/ > /dev/null 2>&1"

#- name: setup cron ssl cert plex
#  cron:
#    name: "run flexget"
#    user: "{{username}}"
#    special_time: monthly
#    job: "sudo openssl pkcs12 -password pass:123 -export -out /var/lib/plexmediaserver/certificate.pfx -inkey /etc/apache2/ssl/certs/seedbox.copeland.me.uk-ssl.key -in /etc/apache2/ssl/certs/seedbox.copeland.me.uk-ssl.pem -certfile /root/.acme.sh/seedbox.copeland.me.uk/fullchain.cer && sudo chown plex:plex /var/lib/plexmediaserver/certificate.pfx"

#- name: setup cron radarr restart due to memory leak, mono ugh.
#  cron:
#    name: "run flexget"
#    user: "{{username}}"
#    special_time: monthly
#    job: "sudo systemctl restart sonarr@bhcopeland.service && sudo systemctl restart radarr.service"

# iplayer

- name: Copy get_iplayer config
  file:
    src: "{{playbook_dir}}/files/.get_iplayer"
    dest: "/home/{{username}}/.get_iplayer"
    owner: "{{username}}"
    state: link
    force: yes

# rclone
- name: Copy systemd config
  copy:
    src: "{{playbook_dir}}/files/systemd/rclone.service"
    dest: /etc/systemd/system/rclone.service

- name: reload systemd
  systemd: daemon_reload=yes

- name: copy rclone conf
  copy: 
    src: "{{playbook_dir}}/files/rclone.conf"
    dest: "/home/{{username}}/.rclone.conf"
    owner: "{{username}}"
    force: yes

- name: enable rclone
  systemd:
    name: rclone
    enabled: yes
    state: started
